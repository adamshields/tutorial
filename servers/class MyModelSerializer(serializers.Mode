class MyModelSerializer(serializers.ModelSerializer):

    def run_validators(self, value):
        for validator in self.validators:
            if isinstance(validator, validators.UniqueTogetherValidator):
                self.validators.remove(validator)
        super(MyModelSerializer, self).run_validators(value)

    def create(self, validated_data):
        instance, _ = models.MyModel.objects.get_or_create(**validated_data)
        return instance

    class Meta:
        model = models.MyModel





from django.db.models.signals import pre_save
from django.utils.text import slugify

class Software(models.Model):
    name            = models.CharField(max_length=200, unique=True, verbose_name='Software Name')
    slug            = models.SlugField(unique=True, null=True)
    status          = models.BooleanField(default=False, verbose_name='Active')
    version         = models.CharField(max_length=300, verbose_name='Version', help_text='Version', blank=True, null=True)
    install_date    = models.CharField(max_length=300, verbose_name='Install Date', help_text='Install Date', blank=True, null=True)

    class Meta:
        verbose_name = ('Software')
        verbose_name_plural = ('Software')
        ordering = ["id", "name"]

    def __str__(self):
        return self.name

def pre_save_software(sender, instance, *args, **kwargs):
	slug = slugify(instance.name)
	instance.slug = slug

pre_save.connect(pre_save_software, sender=Software)